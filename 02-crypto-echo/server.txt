/**
 * =============================================================================
 * STUDENT ASSIGNMENT: CRYPTO-SERVER.C
 * =============================================================================
 * 
 * ASSIGNMENT OBJECTIVE:
 * Implement a TCP server that accepts client connections and processes
 * encrypted/plaintext messages. Your focus is on socket programming, connection
 * handling, and the server-side protocol implementation.
 * 
 * =============================================================================
 * WHAT YOU NEED TO IMPLEMENT:
 * =============================================================================
 * 
 * 1. SERVER SOCKET SETUP (start_server function):
 *    - Create a TCP socket using socket()
 *    - Set SO_REUSEADDR socket option (helpful during development)
 *    - Configure server address structure (struct sockaddr_in)
 *    - Bind the socket to the address using bind()
 *    - Start listening with listen()
 *    - Call your server loop function
 *    - Close socket on shutdown
 * 
 * 2. SERVER MAIN LOOP:
 *    - Create a function that handles multiple clients sequentially
 *    - Loop to:
 *      a) Accept incoming connections using accept()
 *      b) Get client's IP address for logging (inet_ntop)
 *      c) Call your client service function
 *      d) Close the client socket when done
 *      e) Return to accept next client (or exit if shutdown requested)
 * 
 * 3. CLIENT SERVICE LOOP:
 *    - Create a function that handles communication with ONE client
 *    - Allocate buffers for sending and receiving
 *    - Maintain session keys (client_key and server_key)
 *    - Loop to:
 *      a) Receive a PDU from the client using recv()
 *      b) Handle recv() return values (0 = closed, <0 = error)
 *      c) Parse the received PDU
 *      d) Check for special commands (exit, server shutdown)
 *      e) Build response PDU based on message type
 *      f) Send response using send()
 *      g) Return appropriate status code when client exits
 *    - Free buffers before returning
 * 
 * 4. RESPONSE BUILDING:
 *    - Consider creating a helper function to build response PDUs
 *    - Handle different message types:
 *      * MSG_KEY_EXCHANGE: Call gen_key_pair(), send client_key to client
 *      * MSG_DATA: Echo back with "echo " prefix
 *      * MSG_ENCRYPTED_DATA: Decrypt, add "echo " prefix, re-encrypt
 *      * MSG_CMD_CLIENT_STOP: No response needed (client will exit)
 *      * MSG_CMD_SERVER_STOP: No response needed (server will exit)
 *    - Set proper direction (DIR_RESPONSE)
 *    - Return total PDU size
 * 
 * =============================================================================
 * ONE APPROACH TO SOLVE THIS PROBLEM:
 * =============================================================================
 * 
 * FUNCTION STRUCTURE:
 * 
 * void start_server(const char* addr, int port) {
 *     // 1. Create TCP socket
 *     // 2. Set SO_REUSEADDR option (for development)
 *     // 3. Configure server address (sockaddr_in)
 *     //    - Handle "0.0.0.0" specially (use INADDR_ANY)
 *     // 4. Bind socket to address
 *     // 5. Start listening (use BACKLOG constant)
 *     // 6. Call your server loop function
 *     // 7. Close socket
 * }
 * 
 * int server_loop(int server_socket, const char* addr, int port) {
 *     // 1. Print "Server listening..." message
 *     // 2. Infinite loop:
 *     //    a) Accept connection (creates new client socket)
 *     //    b) Get client IP using inet_ntop()
 *     //    c) Print "Client connected..." message
 *     //    d) Call service_client_loop(client_socket)
 *     //    e) Check return code:
 *     //       - RC_CLIENT_EXITED: close socket, accept next client
 *     //       - RC_CLIENT_REQ_SERVER_EXIT: close sockets, return
 *     //       - Error: close socket, continue
 *     //    f) Close client socket
 *     // 3. Return when server shutdown requested
 * }
 * 
 * int service_client_loop(int client_socket) {
 *     // 1. Allocate send/receive buffers
 *     // 2. Initialize keys to NULL_CRYPTO_KEY
 *     // 3. Loop:
 *     //    a) Receive PDU from client
 *     //    b) Check recv() return:
 *     //       - 0: client closed, return RC_CLIENT_EXITED
 *     //       - <0: error, return RC_CLIENT_EXITED
 *     //    c) Cast buffer to crypto_msg_t*
 *     //    d) Check for MSG_CMD_SERVER_STOP -> return RC_CLIENT_REQ_SERVER_EXIT
 *     //    e) Build response PDU (use helper function)
 *     //    f) Send response
 *     //    g) Loop back
 *     // 4. Free buffers before returning
 * }
 * 
 * int build_response(crypto_msg_t *request, crypto_msg_t *response, 
 *                    crypto_key_t *client_key, crypto_key_t *server_key) {
 *     // 1. Set response->header.direction = DIR_RESPONSE
 *     // 2. Set response->header.msg_type = request->header.msg_type
 *     // 3. Switch on request type:
 *     //    MSG_KEY_EXCHANGE:
 *     //      - Call gen_key_pair(server_key, client_key)
 *     //      - Copy client_key to response->payload
 *     //      - Set payload_len = sizeof(crypto_key_t)
 *     //    MSG_DATA:
 *     //      - Format: "echo <original message>"
 *     //      - Copy to response->payload
 *     //      - Set payload_len
 *     //    MSG_ENCRYPTED_DATA:
 *     //      - Decrypt request->payload using decrypt_string()
 *     //      - Format: "echo <decrypted message>"
 *     //      - Encrypt result using encrypt_string()
 *     //      - Copy encrypted data to response->payload
 *     //      - Set payload_len
 *     //    MSG_CMD_*:
 *     //      - Set payload_len = 0
 *     // 4. Return sizeof(crypto_pdu_t) + payload_len
 * }
 * 
 * =============================================================================
 * IMPORTANT PROTOCOL DETAILS:
 * =============================================================================
 * 
 * SERVER RESPONSIBILITIES:
 * 1. Generate encryption keys when client requests (MSG_KEY_EXCHANGE)
 * 2. Send the CLIENT'S key to the client (not the server's key!)
 * 3. Keep both keys: server_key (for decrypting client messages)
 *                    client_key (to send to client)
 * 4. Echo messages back with "echo " prefix
 * 5. Handle encrypted data: decrypt -> process -> encrypt -> send
 * 
 * KEY GENERATION:
 *   crypto_key_t server_key, client_key;
 *   gen_key_pair(&server_key, &client_key);
 *   // Send client_key to the client in MSG_KEY_EXCHANGE response
 *   memcpy(response->payload, &client_key, sizeof(crypto_key_t));
 * 
 * DECRYPTING CLIENT DATA:
 *   // Client encrypted with their key, we decrypt with server_key
 *   uint8_t decrypted[MAX_SIZE];
 *   decrypt_string(server_key, decrypted, request->payload, request->header.payload_len);
 *   decrypted[request->header.payload_len] = '\0'; // Null-terminate
 * 
 * ENCRYPTING RESPONSE:
 *   // We encrypt with server_key for client to decrypt with their key
 *   uint8_t encrypted[MAX_SIZE];
 *   int encrypted_len = encrypt_string(server_key, encrypted, plaintext, plaintext_len);
 *   memcpy(response->payload, encrypted, encrypted_len);
 *   response->header.payload_len = encrypted_len;
 * 
 * RETURN CODES:
 *   RC_CLIENT_EXITED          - Client disconnected normally
 *   RC_CLIENT_REQ_SERVER_EXIT - Client requested server shutdown
 *   RC_OK                     - Success
 *   Negative values           - Errors
 * 
 * =============================================================================
 * SOCKET PROGRAMMING REMINDERS:
 * =============================================================================
 * 
 * CREATING AND BINDING:
 *   int sockfd = socket(AF_INET, SOCK_STREAM, 0);
 *   
 *   struct sockaddr_in addr;
 *   memset(&addr, 0, sizeof(addr));
 *   addr.sin_family = AF_INET;
 *   addr.sin_port = htons(port);
 *   addr.sin_addr.s_addr = INADDR_ANY;  // or use inet_pton()
 *   
 *   bind(sockfd, (struct sockaddr*)&addr, sizeof(addr));
 *   listen(sockfd, BACKLOG);
 * 
 * ACCEPTING CONNECTIONS:
 *   struct sockaddr_in client_addr;
 *   socklen_t addr_len = sizeof(client_addr);
 *   int client_sock = accept(server_sock, (struct sockaddr*)&client_addr, &addr_len);
 * 
 * GETTING CLIENT IP:
 *   char client_ip[INET_ADDRSTRLEN];
 *   inet_ntop(AF_INET, &client_addr.sin_addr, client_ip, INET_ADDRSTRLEN);
 * 
 * =============================================================================
 * DEBUGGING TIPS:
 * =============================================================================
 * 
 * 1. Use print_msg_info() to display received and sent PDUs
 * 2. Print client IP when connections are accepted
 * 3. Check all socket operation return values
 * 4. Test with plaintext (MSG_DATA) before trying encryption
 * 5. Verify keys are generated correctly (print key values)
 * 6. Use telnet or netcat to test basic connectivity first
 * 7. Handle partial recv() - though for this assignment, assume full PDU arrives
 * 
 * =============================================================================
 * TESTING RECOMMENDATIONS:
 * =============================================================================
 * 
 * 1. Start simple: Accept connection and echo plain text
 * 2. Test key exchange: Client sends '#', server generates and returns key
 * 3. Test encryption: Client sends '!message', server decrypts, echoes, encrypts
 * 4. Test multiple clients: Connect, disconnect, connect again
 * 5. Test shutdown: Client sends '=', server exits gracefully
 * 6. Test error cases: Client disconnects unexpectedly
 * 
 * Good luck! Server programming requires careful state management!
 * =============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <stdint.h>
#include "crypto-server.h"
#include "crypto-lib.h"
#include "protocol.h"
#include <errno.h> 

/* =============================================================================
 * STUDENT TODO: IMPLEMENT THIS FUNCTION
 * =============================================================================
 * This is the main server initialization function. You need to:
 * 1. Create a TCP socket
 * 2. Set socket options (SO_REUSEADDR)
 * 3. Bind to the specified address and port
 * 4. Start listening for connections
 * 5. Call your server loop function
 * 6. Clean up when done
 * 
 * Parameters:
 *   addr - Server bind address (e.g., "0.0.0.0" for all interfaces)
 *   port - Server port number (e.g., 1234)
 * 
 * NOTE: If addr is "0.0.0.0", use INADDR_ANY instead of inet_pton()
 */
/* ---------------------------------------------------------------------------
 * File-local forward declarations
 * ------------------------------------------------------------------------- */
static int server_loop(int server_sock, const char* addr, int port);
static int service_client_loop(int client_sock);
static int build_response(const crypto_msg_t *req,
                          crypto_msg_t *resp,
                          crypto_key_t *client_key,
                          crypto_key_t *server_key);

/* =============================================================================
 * SERVER SOCKET SETUP
 * ============================================================================= */
void start_server(const char* addr, int port) {
    int server_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (server_sock < 0) { perror("socket"); return; }

    int yes = 1;
    if (setsockopt(server_sock, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)) < 0) {
        perror("setsockopt(SO_REUSEADDR)");
        close(server_sock);
        return;
    }

    struct sockaddr_in saddr;
    memset(&saddr, 0, sizeof(saddr));
    saddr.sin_family = AF_INET;
    saddr.sin_port   = htons(port);

    if (strcmp(addr, "0.0.0.0") == 0) {
        saddr.sin_addr.s_addr = htonl(INADDR_ANY);
    } else {
        if (inet_pton(AF_INET, addr, &saddr.sin_addr) != 1) {
            fprintf(stderr, "inet_pton failed for %s\n", addr);
            close(server_sock);
            return;
        }
    }

    if (bind(server_sock, (struct sockaddr*)&saddr, sizeof(saddr)) < 0) {
        perror("bind");
        close(server_sock);
        return;
    }

    if (listen(server_sock, BACKLOG) < 0) {
        perror("listen");
        close(server_sock);
        return;
    }

    printf("Server listening on %s:%d (BACKLOG=%d)\n", addr, port, BACKLOG);

    (void)server_loop(server_sock, addr, port);

    close(server_sock);
    printf("Server shutdown complete.\n");
}

/* =============================================================================
 * ACCEPT LOOP (sequential clients)
 * ============================================================================= */
static int server_loop(int server_sock, const char* addr, int port) {
    (void)addr; (void)port;

    for (;;) {
        struct sockaddr_in caddr;
        socklen_t clen = sizeof(caddr);
        int client_sock = accept(server_sock, (struct sockaddr*)&caddr, &clen);
        if (client_sock < 0) {
            if (errno == EINTR) continue;
            perror("accept");
            continue;
        }

        char ip[INET_ADDRSTRLEN];
        inet_ntop(AF_INET, &caddr.sin_addr, ip, sizeof(ip));
        printf("Client connected from %s:%d\n", ip, ntohs(caddr.sin_port));

        int rc = service_client_loop(client_sock);

        close(client_sock);
        printf("Client disconnected (%s)\n",
               rc == RC_CLIENT_REQ_SERVER_EXIT ? "requested server shutdown" : "normal");

        if (rc == RC_CLIENT_REQ_SERVER_EXIT) {
            return 0; /* stop server */
        }
    }
}

/* =============================================================================
 * PER-CLIENT SERVICE LOOP
 * ============================================================================= */
static int service_client_loop(int client_sock) {
    crypto_key_t client_key = NULL_CRYPTO_KEY; /* sent to client on exchange */
    crypto_key_t server_key = NULL_CRYPTO_KEY; /* kept server-side */

    /* Use fixed I/O buffers; cast to crypto_msg_t* when reading/writing */
    uint8_t recv_buf[BUFFER_SIZE];
    uint8_t send_buf[BUFFER_SIZE];

    for (;;) {
        ssize_t n = recv(client_sock, recv_buf, sizeof(recv_buf), 0);
        if (n == 0) {
            return RC_CLIENT_EXITED; /* client closed */
        }
        if (n < 0) {
            perror("recv");
            return RC_CLIENT_EXITED;
        }
        if (n < (ssize_t)sizeof(crypto_pdu_t)) {
            fprintf(stderr, "Short PDU header (%zd bytes)\n", n);
            return RC_CLIENT_EXITED;
        }

        const crypto_msg_t *req = (const crypto_msg_t*)recv_buf;

        /* Sanity: payload_len must fit in our buffer */
        if ((size_t)n != sizeof(crypto_pdu_t) + req->header.payload_len) {
            /* Assignment allows assuming full PDU; treat mismatch as error */
            fprintf(stderr, "PDU size mismatch: got %zd, expect %zu\n",
                    n, sizeof(crypto_pdu_t) + (size_t)req->header.payload_len);
            return RC_CLIENT_EXITED;
        }

        /* Stop commands: no response */
        if (req->header.msg_type == MSG_CMD_SERVER_STOP) {
            return RC_CLIENT_REQ_SERVER_EXIT;
        }
        if (req->header.msg_type == MSG_CMD_CLIENT_STOP) {
            return RC_CLIENT_EXITED;
        }

        crypto_msg_t *resp = (crypto_msg_t*)send_buf;
        int out_len = build_response(req, resp, &client_key, &server_key);
        if (out_len < 0) {
            fprintf(stderr, "build_response failed\n");
            return RC_CLIENT_EXITED;
        }

        /* Send response when applicable */
        if (resp->header.payload_len > 0 ||
            (resp->header.msg_type != MSG_CMD_CLIENT_STOP &&
             resp->header.msg_type != MSG_CMD_SERVER_STOP)) {

            ssize_t m = send(client_sock, send_buf, (size_t)out_len, 0);
            if (m < 0) {
                perror("send");
                return RC_CLIENT_EXITED;
            }
        }
    }
}

/* =============================================================================
 * RESPONSE BUILDER
 * ============================================================================= */
static int build_response(const crypto_msg_t *req,
                          crypto_msg_t *resp,
                          crypto_key_t *client_key,
                          crypto_key_t *server_key)
{
    resp->header.direction   = DIR_RESPONSE;
    resp->header.msg_type    = req->header.msg_type;
    resp->header.payload_len = 0;

    const uint8_t *in_payload  = req->payload;
    uint16_t       in_len      = req->header.payload_len;

    switch (req->header.msg_type) {
        case MSG_KEY_EXCHANGE: {
            gen_key_pair(server_key, client_key);

            if (sizeof(crypto_pdu_t) + sizeof(crypto_key_t) > BUFFER_SIZE) return -1;
            memcpy(resp->payload, client_key, sizeof(crypto_key_t));
            resp->header.payload_len = (uint16_t)sizeof(crypto_key_t);
            break;
        }

        case MSG_DATA: {
            const char *prefix = "echo ";
            size_t prefix_len = strlen(prefix);

            /* Clamp to our output capacity */
            size_t out_cap = MAX_MSG_DATA_SIZE;
            size_t copy_len = in_len;
            if (prefix_len + copy_len > out_cap) {
                copy_len = out_cap - prefix_len;
            }

            memcpy(resp->payload, prefix, prefix_len);
            memcpy(resp->payload + prefix_len, in_payload, copy_len);
            resp->header.payload_len = (uint16_t)(prefix_len + copy_len);
            break;
        }

        case MSG_ENCRYPTED_DATA: {
            if (*server_key == NULL_CRYPTO_KEY) {
                fprintf(stderr, "Encrypted message before key exchange\n");
                return -1;
            }

            /* Decrypt into a temp buffer sized by MAX_MSG_DATA_SIZE */
            uint8_t plain[MAX_MSG_DATA_SIZE];
            int dec_len = decrypt_string(*server_key, plain, in_payload, (int)in_len);
            if (dec_len < 0) return -1;

            const char *prefix = "echo ";
            size_t prefix_len = strlen(prefix);

            uint8_t to_enc[MAX_MSG_DATA_SIZE];
            size_t total_plain = prefix_len + (size_t)dec_len;
            if (total_plain > MAX_MSG_DATA_SIZE) {
                /* truncate decoded portion to fit */
                dec_len = (int)(MAX_MSG_DATA_SIZE - prefix_len);
                total_plain = MAX_MSG_DATA_SIZE;
            }

            memcpy(to_enc, prefix, prefix_len);
            memcpy(to_enc + prefix_len, plain, (size_t)dec_len);

            int enc_len = encrypt_string(*server_key, resp->payload, to_enc, (int)total_plain);
            if (enc_len < 0 || (size_t)enc_len > MAX_MSG_DATA_SIZE) return -1;

            resp->header.payload_len = (uint16_t)enc_len;
            break;
        }

        default:
            /* No payload for unknown/command types */
            resp->header.payload_len = 0;
            break;
    }

    return (int)(sizeof(crypto_pdu_t) + resp->header.payload_len);
}

